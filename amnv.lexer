package generated.lexer
;
%%

/* 
A linha atual pode ser acessada por yyline 
e a coluna atual com yycolumn. 
*/ 
%line
%column

/* Se quisermos 'interfacear' com um parser gerado pelo sistema CUP
%cup
*/ 

//encoding
%unicode

// faz com que a classe tenha uma função main e torna possivel que a classe gerada seja usada como reconhecedor
%standalone

//nomeia a classe
%class amnv

/* 
Declarações

código dentro de %{ e %}, é copiado para a classe gerada. 
a ideia é utilizar este recurso para declarar atributos e métodos usados nas ações 
*/ 
%{
int qtdeID=0;
%}


%eof{
System.out.println("Quantidade de Identificadores encontrados: "+qtdeID);
%eof}

/*-*
 * PADROES NOMEADOS:
 */
letter          = [A-Za-z]
Digit           = [0-9]
Integer         = {Digit}+
LitInt          = [1-9]{Digit}*
alphanumeric    = {letter}|{Digit}
Identifier      = (!{Reserved}) && ({Underline}|{letter})({alphanumeric}| {Underline})*
Underline       = '_'
whitespace      = [ \t\f] | \r|\n|\r\n
AnyCharacter    = [^\r\n]
Comment         = {LineComment} | {LongComment}
LineComment     = "//" {AnyCharacter}* {whitespace}?
LongComment = "/*" [^*] ~"*/" | "/*" "*"+ "/"

Reserved        = ["boolean"|"class"|"public"|"extends"|"static"|"void"|"main"|"String"|"int"|"while"|"if"|"else"|"return"|"length"|"true"|"false"|"this"|"new"|"System.out.println"]
Operator        = "&&" | "<" | "==" | "!=" | "+" | "-" | "*" | "!"
Delimiter = ";" | "." | "," | "=" | "(" | ")" | "{" | "}" | "[" | "]"

%%
/**
 * REGRAS LEXICAS:
 */
and             { System.out.println("Token AND"); }
or              { System.out.println("Token OR"); }
/*
    "*"             { System.out.println("Token *"); }
    "+"             { System.out.println("Token +"); }
    "-"             { System.out.println("Token -"); }
    "/"             { System.out.println("Token /"); }
    "("             { System.out.println("Token ("); }
    ")"             { System.out.println("Token )"); }
*/
{Identifier}    { qtdeID++; System.out.println("Token ID ("+yytext()+")"); }
{LitInt}       { System.out.println("Token INT ("+yytext()+")"); }
{whitespace}    { /* Ignorar whitespace. */ }
.               { System.out.println("Illegal char, '" + yytext() +
                    "' line: " + yyline + ", column: " + yycolumn); }
{Comment}       { /*Ignorar Comment*/}
{Operator}       { System.out.println("Token operador ("+yytext()+") "); }   
{Reserved} { System.out.println("Token palavras reservadas ("+yytext()+") "); }
{Delimiter} { System.out.println("Token demilitadores ("+yytext()+") "); }



outros {throw new RuntimeException("Caractere ilegal! '" + yytext() + "' na linha: " + yyline + ", coluna: " + yycolumn);}
